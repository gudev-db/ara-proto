import streamlit as st
from google import genai
import os

# Configura√ß√£o do Gemini API
gemini_api_key = os.getenv("GEM_API_KEY")
client = genai.Client(api_key=gemini_api_key)

# Fun√ß√£o para limpar o estado do Streamlit
def limpar_estado():
    for key in list(st.session_state.keys()):
        del st.session_state[key]

# Fun√ß√£o principal do app
def main():
    st.title("üìù Gerador de Relat√≥rios de Entrevista")
    st.markdown("""
    Este aplicativo transforma transcri√ß√µes de entrevistas em relat√≥rios estruturados.
    Cole o texto da entrevista abaixo e clique em "Gerar Relat√≥rio".
    """)
    
    # √Årea para inser√ß√£o do texto da entrevista
    entrevista = st.text_area("Cole o texto da entrevista aqui:", height=300,
                             placeholder="Exemplo:\nEntrevistador: Qual seu principal desafio?\nEntrevistado: Nosso maior problema √©...")
    
    # Op√ß√µes de an√°lise
    st.sidebar.header("Op√ß√µes de An√°lise")
    nivel_detalhe = st.sidebar.selectbox("N√≠vel de detalhe:", ["Resumido", "Detalhado", "Extremamente detalhado"])
    incluir_sumario = st.sidebar.checkbox("Incluir resumo executivo", value=True)
    incluir_topicos = st.sidebar.checkbox("Incluir t√≥picos-chave", value=True)
    incluir_insights = st.sidebar.checkbox("Incluir insights estrat√©gicos", value=True)
    
    if st.button("Gerar Relat√≥rio"):
        if not entrevista:
            st.warning("Por favor, cole o texto da entrevista antes de gerar o relat√≥rio.")
        else:
            with st.spinner("Analisando a entrevista e gerando relat√≥rio..."):
                # Construir o prompt com base nas op√ß√µes selecionadas
                prompt = f"""
                Analise a seguinte entrevista e gere um relat√≥rio profissional com base nos seguintes requisitos:
                
                - N√≠vel de detalhe: {nivel_detalhe}
                - Incluir resumo executivo: {"Sim" if incluir_sumario else "N√£o"}
                - Incluir t√≥picos-chave: {"Sim" if incluir_topicos else "N√£o"}
                - Incluir insights estrat√©gicos: {"Sim" if incluir_insights else "N√£o"}
                
                Texto da entrevista:
                {entrevista}
                
                Estruture o relat√≥rio da seguinte forma:
                
                1. [S√≥ se solicitado] Resumo Executivo (m√°ximo 1 par√°grafo)
                2. T√≥picos Principais Discutidos (lista com os principais assuntos)
                3. Pontos-Chave Identificados (destaque os pontos mais relevantes)
                4. [S√≥ se solicitado] Insights Estrat√©gicos (an√°lise mais aprofundada)
                5. Recomenda√ß√µes ou Pr√≥ximos Passos (sugest√µes baseadas na entrevista)
                
                Seja conciso mas completo, mantendo um tom profissional. Use marcadores para listas e destaque termos importantes em negrito quando apropriado.
                """
                
                # Gerar o relat√≥rio usando o Gemini
                try:
                    relatorio = client.models.generate_content(
                        model="gemini-2.0-flash",
                        contents=[prompt]).text
                    
                    # Exibir o relat√≥rio
                    st.success("Relat√≥rio gerado com sucesso!")
                    st.markdown("---")
                    st.subheader("üìã Relat√≥rio da Entrevista")
                    st.markdown(relatorio)
                    
                    # Op√ß√£o para baixar o relat√≥rio
                    st.download_button(
                        label="Baixar Relat√≥rio",
                        data=relatorio,
                        file_name="relatorio_entrevista.md",
                        mime="text/markdown"
                    )
                    
                except Exception as e:
                    st.error(f"Ocorreu um erro ao gerar o relat√≥rio: {str(e)}")

if __name__ == "__main__":
    main()
